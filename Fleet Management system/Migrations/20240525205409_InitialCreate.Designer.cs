// <auto-generated />
using Fleet_Management_system.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fleet_Management_system.Migrations
{
    [DbContext(typeof(Contextdata))]
    [Migration("20240525205409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fleet_Management_system.Models.Circlegeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Geofenceid")
                        .HasColumnType("bigint")
                        .HasColumnName("geofenceid");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("latitude");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude");

                    b.Property<long?>("Radius")
                        .HasColumnType("bigint")
                        .HasColumnName("radius");

                    b.HasKey("Id");

                    b.HasIndex("Geofenceid");

                    b.ToTable("circlegeofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Driver", b =>
                {
                    b.Property<long>("Driverid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("driverid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Driverid"));

                    b.Property<string>("Drivername")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("drivername");

                    b.Property<long?>("Phonenumber")
                        .HasColumnType("bigint")
                        .HasColumnName("phonenumber");

                    b.HasKey("Driverid");

                    b.ToTable("driver");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Geofence", b =>
                {
                    b.Property<long>("Geofenceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("geofenceid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Geofenceid"));

                    b.Property<long?>("Addeddate")
                        .HasColumnType("bigint")
                        .HasColumnName("addeddate");

                    b.Property<string>("Fillcolor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fillcolor");

                    b.Property<float?>("Fillopacity")
                        .HasColumnType("real")
                        .HasColumnName("fillopacity");

                    b.Property<string>("Geofencetype")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("geofencetype");

                    b.Property<string>("Strokecolor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("strokecolor");

                    b.Property<float?>("Strokeopacity")
                        .HasColumnType("real")
                        .HasColumnName("strokeopacity");

                    b.Property<float?>("Strokeweight")
                        .HasColumnType("real")
                        .HasColumnName("strokeweight");

                    b.HasKey("Geofenceid");

                    b.ToTable("geofences");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Polygongeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Geofenceid")
                        .HasColumnType("bigint")
                        .HasColumnName("geofenceid");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("latitude");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude");

                    b.HasKey("Id");

                    b.HasIndex("Geofenceid");

                    b.ToTable("polygongeofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Rectanglegeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("East")
                        .HasColumnType("real")
                        .HasColumnName("east");

                    b.Property<long?>("Geofenceid")
                        .HasColumnType("bigint")
                        .HasColumnName("geofenceid");

                    b.Property<float?>("North")
                        .HasColumnType("real")
                        .HasColumnName("north");

                    b.Property<float?>("South")
                        .HasColumnType("real")
                        .HasColumnName("south");

                    b.Property<float?>("West")
                        .HasColumnType("real")
                        .HasColumnName("west");

                    b.HasKey("Id");

                    b.HasIndex("Geofenceid");

                    b.ToTable("rectanglegeofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Routehistory", b =>
                {
                    b.Property<long>("Routehistoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("routehistoryid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Routehistoryid"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<long?>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("latitude");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude");

                    b.Property<char?>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("status");

                    b.Property<int?>("Vehicledirection")
                        .HasColumnType("integer")
                        .HasColumnName("vehicledirection");

                    b.Property<long?>("Vehicleid")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicleid");

                    b.Property<long?>("Vehiclespeed")
                        .HasColumnType("bigint")
                        .HasColumnName("vehiclespeed");

                    b.HasKey("Routehistoryid");

                    b.HasIndex("Vehicleid");

                    b.ToTable("routehistory");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Vehicle", b =>
                {
                    b.Property<long>("Vehicleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vehicleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Vehicleid"));

                    b.Property<long>("VehicleInformationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Vehiclenumber")
                        .HasColumnType("bigint")
                        .HasColumnName("vehiclenumber");

                    b.Property<string>("Vehicletype")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vehicletype");

                    b.HasKey("Vehicleid");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Vehiclesinformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Driverid")
                        .HasColumnType("bigint")
                        .HasColumnName("driverid");

                    b.Property<long?>("Purchasedate")
                        .HasColumnType("bigint")
                        .HasColumnName("purchasedate");

                    b.Property<long>("Vehicleid")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicleid");

                    b.Property<string>("Vehiclemake")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vehiclemake");

                    b.Property<string>("Vehiclemodel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vehiclemodel");

                    b.HasKey("Id");

                    b.HasIndex("Driverid");

                    b.HasIndex("Vehicleid")
                        .IsUnique();

                    b.ToTable("vehiclesinformations");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Circlegeofence", b =>
                {
                    b.HasOne("Fleet_Management_system.Models.Geofence", "Geofence")
                        .WithMany("Circlegeofences")
                        .HasForeignKey("Geofenceid");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Polygongeofence", b =>
                {
                    b.HasOne("Fleet_Management_system.Models.Geofence", "Geofence")
                        .WithMany("Polygongeofences")
                        .HasForeignKey("Geofenceid");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Rectanglegeofence", b =>
                {
                    b.HasOne("Fleet_Management_system.Models.Geofence", "Geofence")
                        .WithMany("Rectanglegeofences")
                        .HasForeignKey("Geofenceid");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Routehistory", b =>
                {
                    b.HasOne("Fleet_Management_system.Models.Vehicle", "Vehicle")
                        .WithMany("Routehistories")
                        .HasForeignKey("Vehicleid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Vehiclesinformation", b =>
                {
                    b.HasOne("Fleet_Management_system.Models.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("Driverid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fleet_Management_system.Models.Vehicle", "Vehicle")
                        .WithOne("VehicleInformation")
                        .HasForeignKey("Fleet_Management_system.Models.Vehiclesinformation", "Vehicleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Driver", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Geofence", b =>
                {
                    b.Navigation("Circlegeofences");

                    b.Navigation("Polygongeofences");

                    b.Navigation("Rectanglegeofences");
                });

            modelBuilder.Entity("Fleet_Management_system.Models.Vehicle", b =>
                {
                    b.Navigation("Routehistories");

                    b.Navigation("VehicleInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
